name: Sync and Deploy

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 0 * * *" # daily at midnight
  workflow_dispatch:

jobs:
  sync:
    name: Sync latest commits from upstream repo
    runs-on: ubuntu-latest
    if: ${{ github.event.repository.fork }}
    outputs:
      changes: ${{ steps.check_changes.outputs.changes }}
    steps:
      - name: Checkout target repo
        uses: actions/checkout@v3
      - name: Sync upstream changes
        id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@v3.4
        with:
          upstream_sync_repo: Byaidu/PDFMathTranslate
          upstream_sync_branch: main
          target_sync_branch: main
          target_repo_token: ${{ secrets.GITHUB_TOKEN }}
          test_mode: false
      - name: Check if there were changes
        id: check_changes
        run: |
          if [[ ${{ steps.sync.outputs.has_new_commits }} == "true" ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: sync
    if: |
      always() &&
      (needs.sync.result == 'success' || needs.sync.result == 'skipped') &&
      (github.event_name == 'push' || (github.event_name == 'schedule' && needs.sync.outputs.changes == 'true') || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Check for HF_TOKEN
        id: check_token
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          if [[ -n "$HF_TOKEN" ]]; then
            echo "token_exists=true" >> $GITHUB_OUTPUT
          else
            echo "token_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Deploy to HuggingFace Spaces
        if: steps.check_token.outputs.token_exists == 'true'
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          # Remove git history
          rm -rf .git
          rm -f README.md Dockerfile
          cat <<EOF > Dockerfile
          FROM python:3.12
          RUN useradd -m appuser
          WORKDIR /app
          COPY . .
          RUN chown -R appuser:appuser /app
          RUN apt-get update && apt-get install -y libgl1 inotify-tools
          ENV HF_HOME="/app/hf_cache"
          RUN pip install .
          COPY entrypoint.sh /app/entrypoint.sh
          RUN chmod +x /app/entrypoint.sh
          USER appuser
          EXPOSE 7860
          ENV PYTHONUNBUFFERED=1
          ENTRYPOINT ["/app/entrypoint.sh"]
          EOF
          cat <<EOF > README.md
          ---
          title: PDFMathTranslate Demo
          sdk: docker
          pinned: false
          license: agpl-3.0
          short_description: 'Demo for https://github.com/Byaidu/PDFMathTranslate'
          ---
          Check out the configuration reference at https://huggingface.co/docs/hub/spaces-config-reference
          EOF
          cat <<'EOF' > entrypoint.sh
          #!/bin/bash
          set -euo pipefail
          UPLOADED_FILES_RECORD="/app/uploaded_files.txt"
          WATCH_DIR="pdf2zh_files"
          cleanup() {
              echo "正在退出..."
              exit 0
          }
          trap cleanup SIGTERM SIGINT
          echo "$APP_USERS" > /app/users.txt
          chmod 600 /app/users.txt
          echo "{}" > /app/config.json
          pdf2zh -i --authorized /app/users.txt --config /app/config.json &
          if [ ! -f "$UPLOADED_FILES_RECORD" ]; then
              touch "$UPLOADED_FILES_RECORD"
          fi
          if [ ! -d "$WATCH_DIR" ]; then
              mkdir "$WATCH_DIR"
          fi
          upload_file() {
              local file="$1"
              (
                  flock -n 9 || exit 1
          
                  if grep -Fxq "$file" "$UPLOADED_FILES_RECORD"; then
                      echo "文件 $file 已经上传过，跳过。"
                      exit 0
                  fi
                  echo "正在上传 $file..."
                  encoded_file=$(python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.argv[1]))" "$file")
                  if curl -T "$WATCH_DIR/$file" "$WEBDAV_URL/$encoded_file" --user "$WEBDAV_USER:$WEBDAV_PASS"; then
                      echo "成功上传 $file"
                      echo "$file" >> "$UPLOADED_FILES_RECORD"
                  else
                      echo "上传 $file 失败" >&2
                  fi
          
              ) 9>>"$UPLOADED_FILES_RECORD.lock"
          }
          if command -v inotifywait >/dev/null 2>&1; then
              echo "开始监控 $WATCH_DIR 文件夹..."
              inotifywait -m -e create -e moved_to --format '%f' "$WATCH_DIR" |
              while read -r filename; do
                  # 检查文件是否为 PDF，并且存在
                  if [[ "$filename" =~ \.pdf$ ]] && [ -f "$WATCH_DIR/$filename" ]; then
                      upload_file "$filename"
                  fi
              done
          else
              echo "未安装 inotifywait，使用定期检查方式。您可以通过 'sudo apt-get install inotify-tools' 安装 inotifywait。"
              while true; do
                  for local_file in "$WATCH_DIR"/*.pdf; do
                      if [ -f "$local_file" ]; then
                          filename=$(basename "$local_file")
                          # 检查文件是否已上传
                          if ! grep -Fxq "$filename" "$UPLOADED_FILES_RECORD"; then
                              upload_file "$filename"
                          fi
                      fi
                  done
                  sleep 60
              done
          fi
          EOF
          # Configure git
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          # Set up Git and push to Space
          git init --initial-branch=main
          git lfs install
          git lfs track "*.png"
          git lfs track "*.pdf"
          git add .
          git commit -m "GitHub deploy: ${{ github.sha }}"
          git push --force https://xnwh:${HF_TOKEN}@huggingface.co/spaces/xnwh/pz main
